#!groovy

def appReleaseName = "${APP_NAME}-${RELEASE_VERSION}"
def dbName = "${appReleaseName}-${new Random().nextInt() % 1000}".replace('-', '')
def tmpDir = "${appReleaseName}-tmp"
// default values
def gitUrl = "${GIT_URL}"
def gitDevopsDir = "${GIT_DEVOPS_DIR}"
def buildVersion = "" // From build-info.json
def commonVersion = "NA"
def infraVersion = "NA"

// Parameters for backing service. Scope global so we can clean up
def backingService = ""
def backingServiceName = ""
def backingServiceAppName = ""
def backingServiceAppVersion = ""
def backingServiceDbName = ""

def propagateTo = []
def artifactFolder = "target"
def applicationZip = "${artifactFolder}/${appReleaseName}-${BUILD_NUMBER}.tar.gz"
def versionFlags = ""
def testList = []
def buildArgs = "clean build"
def latestTag = "${RELEASE_VERSION}.latest"

// function to run database commands
def dbScript(cmd) {
  sh(
          script: "oc rsh \$(oc get pods | grep mysql- | grep Running | awk \'{ print \$1 }\')  bash -c \"mysql -u root -e \'${cmd}\'\"",
          returnStatus: true
  )
}

// run shell command, return status code
def shell(cmd) {
  sh(
          script: cmd,
          returnStatus: true
  )
}

// run shell command and signal an error on failure
def eshell(cmd) {
  def rc = shell(cmd)
  if (rc != 0) {
    error("Error: shell command exited with error code ${rc}")
  }
}

//
def log(msg) {
  echo "${new Date()} -- ${msg}"
}

// function to extract openshift stage configuration only from repo. dir must not exist
// returns build version. This is only used for IntygstjÃ¤nst as a backing service
def extractConfig(dir, url, ref, stage, latestTag) {
  eshell("rm -rf ${dir}")
  eshell("mkdir ${dir}")
  def wd = "cd ${dir}; "
  eshell(wd + "git init")
  eshell(wd + "git remote add origin -f ${url} 2> /dev/null")
  eshell(wd + "git config core.sparsecheckout true")
  eshell(wd + "echo 'devops/openshift/${stage}/*' >> .git/info/sparse-checkout")
  if (ref.startsWith("v")) {
    if (ref.endsWith('.+')) {
      ref = ref.replace('+', '')
    }
    def tag = sh(
            script: wd + "git tag -l | grep ${ref} | sort | tail -1",
            returnStdout: true
    ).trim()
    eshell(wd + "git checkout tags/${tag}")
    return tag.substring(1)
  } else {
    eshell(wd + "git checkout ${ref}")
    return "${latestTag}"
  }
}

// function to perform a named test
def performTest(testName, buildVersion, appReleaseName, gitDevopsDir) {
  echo "Do ${testName}"

  // Setup callback webhook
  def hook = registerWebhook()

  // Just use name
  def targetUrl = "http://${appReleaseName}:${TEST_PORT}"
  def actuatorUrl = "http://${appReleaseName}:8081"

  def imageStream = openshift.selector("is", "${APP_NAME}").object().status.dockerImageRepository
  echo "Use ImageStream: ${imageStream}"

  // to make the pod name somewhat unique
  // TODO: use generateName in Pod template, i.e. when it works
  def num = (new Random().nextInt() % 100000) + 1
  def suffix = (num < 0) ? "${num}" : "-${num}"
  def pod = openshift.process("-f", "${gitDevopsDir}/openshift/${TESTRUNNER_TEMPLATE}",
          "-p", "APP_NAME=${appReleaseName}",
          "-p", "IMAGE='${imageStream}-${ARTIFACT_IMAGE_SUFFIX}:${buildVersion}'",
          "-p", "STAGE=${STAGE}",
          "-p", "TARGET_URL='${targetUrl}'",
          "-p", "ACTUATOR_URL='${actuatorUrl}'",
          "-p", "BUILD_VERSION=${buildVersion}",
          "-p", "JOB_NAME=${JOB_NAME}",
          "-p", "CALLBACK_URL='${hook.getURL()}'",
          "-p", "BUILD_TAG=${BUILD_TAG}${suffix}",
          "-p", "TESTS=${testName}")
  openshift.apply(pod)

  def data = ""
  timeout(45) {
    echo "Waiting (max 45 min) for POST to ${hook.getURL()}"
    data = waitForWebhook(hook).trim()

    echo "Publishing ${testName} reports for ${JOB_NAME}/${buildVersion}"
    publishHTML([
            allowMissing         : true,
            alwaysLinkToLastBuild: true,
            keepAll              : true,
            reportDir            : "/var/lib/jenkins/reports/$JOB_NAME/${buildVersion}/${testName}/",
            reportFiles          : "${testName}.html",
            reportName           : "${testName.capitalize()} Results",
    ])
  }

  echo "Logs for ${BUILD_TAG}${suffix}"
  openshift.selector("pod", "${BUILD_TAG}${suffix}").logs()

  if ("SUCCESS".equals(data)) {
    echo "Test SUCCESS"
  } else {
    error("${testName} FAILED, see HTML report for details")
  }
}

pipeline {
  agent any

  environment {
    JAVA_TOOL_OPTIONS = '-Dfile.encoding=UTF-8'
  }

  stages {

    stage('Checkout Source') {
      steps {
        script {
          // Checkout application source
          git url: "${gitUrl}", branch: GIT_BRANCH

          def info = readJSON file: 'build-info.json'
          echo "${info}"
          buildVersion = "${info.appVersion}.${BUILD_NUMBER}"
          if (info.commonVersion) {
            commonVersion = info.commonVersion
          }
          if (info.infraVersion) {
            infraVersion = info.infraVersion
          }
          if (info.backingService) {
            backingService = info.backingService
          }
          if (info.propagate) {
            propagateTo = info.propagate
          }
          if (info.buildArgs) {
            buildArgs = info.buildArgs
          }
          if (info.tests) {
            testList = info.tests
          }
          versionFlags = "-DbuildVersion=${buildVersion} -DcommonVersion=${commonVersion} -DinfraVersion=${infraVersion}"
        }
      }
    }

    stage('Prepare') {
      steps {
        script {
          currentBuild.displayName = "${appReleaseName} ${buildVersion}"

          echo "Prepare configuration and check pre-conditions"
          openshift.withCluster() {
            openshift.withProject() {
              log "Pipeline started with:"
              echo "gitUrl: ${gitUrl}, gitBranch: ${GIT_BRANCH}"
              echo "buildVersion: ${buildVersion}, infraVersion: ${infraVersion}, commonVersion: ${commonVersion}"
              echo "backingService: ${backingService}"
              echo "gitDevopsDir: ${gitDevopsDir}"

              // check envrionment
              [GIT_DEVOPS_DIR, APP_NAME, RELEASE_VERSION, STAGE, BUILD_TEMPLATE, DEPLOY_TEMPLATE, TESTRUNNER_TEMPLATE, ARTIFACT_IMAGE_SUFFIX, GIT_URL, GIT_CI_BRANCH, TEST_PORT, BUILD_TOOL, CONTEXT_PATH, HEALTH_URI, GIT_BRANCH, buildVersion].each {
                if (!it) {
                  error("No such required context variable in environment.")
                }
              }

              echo "All environment variables in place!"
              sh "ls -la ${pwd()}"

              // Make sure required template files exists in devops repo
              ["${BUILD_TEMPLATE}", "${DEPLOY_TEMPLATE}", "${TESTRUNNER_TEMPLATE}"].each {
                if (!fileExists("${gitDevopsDir}/openshift/${it}")) {
                  error("Unable to find template file ${it}")
                }
              }

              // database
              def status = dbScript("create database ${dbName} character set utf8mb4;")
              if (status != 0) {
                error("Unable to create database ${dbName}")
              }

              // cleanup app specific redis keys
              sh(
                      script: "oc rsh \$(oc get pods | grep redis- | grep Running | awk \'{ print \$1 }\')  /opt/rh/rh-redis32/root/usr/bin/redis-cli -a redis  EVAL \"return redis.call(\'del\', unpack(redis.call(\'keys\', ARGV[1])))\" 0 *:${appReleaseName}:*",
                      returnStatus: true
              )
            }
          }
        }
      }
    }

    stage('Build Binaries') {
      steps {
        script {
          def applicationDir = "."
          if (!fileExists("${artifactFolder}")) {
            eshell("mkdir -p ${artifactFolder}")
          }
          try {
            log("Starting gradle build")
            "${BUILD_TOOL}" "${buildArgs} ${versionFlags}"
          } finally {
            publishHTML([
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : 'build/reports/allTests',
                    reportFiles          : 'index.html',
                    reportName           : 'JUnitTests',
            ])
          }
          eshell("tar --exclude ${artifactFolder} --exclude ${tmpDir} --exclude ${gitDevopsDir} --exclude .git -chzf ${applicationZip} ${applicationDir}")
          archiveArtifacts artifacts: "${applicationZip}", excludes: null, onlyIfSuccessful: true
        }
      }
    }

    stage('Setup Image Builds') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def models = openshift.process("-f", "${gitDevopsDir}/openshift/${BUILD_TEMPLATE}",
                      "-p", "IS_APP_NAME=${APP_NAME}",
                      "-p", "APP_NAME=${appReleaseName}",
                      "-p", "STAGE=${STAGE}",
                      "-p", "BUILD_VERSION=${buildVersion}",
                      "-p", "INFRA_VERSION=${infraVersion}",
                      "-p", "COMMON_VERSION=${commonVersion}",
                      "-p", "CONTEXT_PATH=${CONTEXT_PATH}",
                      "-p", "ARTIFACT_IMAGE_SUFFIX=${ARTIFACT_IMAGE_SUFFIX}")
              openshift.apply(models)
            }
          }
        }
      }
    }

    stage('Create Artifact Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              log "Build artifact image ${APP_NAME}-${ARTIFACT_IMAGE_SUFFIX}"
              def build = openshift.selector("bc", "${appReleaseName}-${ARTIFACT_IMAGE_SUFFIX}").startBuild("--from-archive=${applicationZip}")
              sleep(time: 1, unit: 'SECONDS')
              echo "${build.name()} started"
              timeout(30) {
                def status = ""
                build.untilEach(1) {
                  status = it.object().status.phase
                  echo "Build status: ${status}"
                  return !["Running", "Pending", "New"].contains(status)
                }
                echo "Logs for artifact build"
                build.logs()
                if (status != "Complete") {
                  error("Build terminated with status: ${status}")
                }
                echo "Build Completed"
              }
            }
          }
        }
      }
    }

    stage('Create Runtime Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              log "Build runtime image ${APP_NAME}"
              def build = openshift.selector("bc", "${appReleaseName}").startBuild()
              sleep(time: 1, unit: 'SECONDS')
              echo "${build.name()} started"
              timeout(45) {
                def status = ""
                build.untilEach(1) {
                  status = it.object().status.phase
                  echo "Build status: ${status}"
                  return !["Running", "Pending", "New"].contains(status)
                }
                echo "Logs for docker runtime build"
                build.logs()
                if (status != "Complete") {
                  error("Build terminated with status: ${status}")
                }
                log "Build Completed"
              }
            }
          }
        }
      }
    }

    stage('Setup Deploy Config') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              shell("oc delete configmap ${appReleaseName}-config")
              shell("oc delete configmap ${appReleaseName}-configmap-envvar")
              shell("oc delete secret ${appReleaseName}-env")
              shell("oc delete secret ${appReleaseName}-certifikat")
              shell("oc delete secret ${appReleaseName}-secret-envvar")

              def wd = "cd devops/openshift; "
              eshell(wd + "oc create configmap ${appReleaseName}-configmap-envvar --from-env-file=${STAGE}/configmap-envvar.properties")
              eshell(wd + "oc create configmap ${appReleaseName}-config --from-file=${STAGE}/config/")
              eshell(wd + "oc create secret generic ${appReleaseName}-secret-envvar --from-env-file=${STAGE}/secret-envvar.properties --type=Opaque")
              eshell(wd + "oc create secret generic ${appReleaseName}-env --from-file=${STAGE}/env/ --type=Opaque")
              eshell(wd + "oc create secret generic ${appReleaseName}-certifikat --from-file=${STAGE}/certifikat/ --type=Opaque")
            }
          }
        }
      }
    }

    stage('Deploy IntygstjÃ¤nst') {
      when {
        expression {
          return !backingService.empty
        }
      }
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              // [ name, tag ] default version is "${RELEASE_VERSION}.latest"
              def svc = (backingService.contains(":") ? backingService : backingService + ":${latestTag}").split(":")
              backingServiceName = "${svc[0]}"
              def backingServiceVersion = "${svc[1]}"
              def healthUri = "/"
              // FIXME: dirty work-around!
              if (backingServiceName.startsWith("intygstjanst")) {
                healthUri += "inera-certificate"
              } else {
                error("For the time being, intygstjanst only is allowed as a backing service")
              }
              backingServiceDbName = "${backingServiceName.replace('-', '')}${dbName}"
              def status = dbScript("create database ${backingServiceDbName} character set utf8mb4;")
              if (status != 0) {
                error("Unable to create database ${backingServiceDbName}")
              }

              // checkout actual configuration for the base service version, then copy to the actual backing service name.
              // Note: not multi-thread safe, implies one build at a time
              backingServiceAppName = "${backingServiceName}-${appReleaseName}"
              def svcGitRef = backingServiceVersion.equals("${latestTag}") ? "${GIT_BRANCH}" : "v${backingServiceVersion}"

              // Replace configured backingServiceVersion with the version extracted from git tag
              echo "Extract config for intygstjanst ${svcGitRef}"
              backingServiceAppVersion = extractConfig(tmpDir, "https://github.com/sklintyg/intygstjanst.git", svcGitRef, "${STAGE}", latestTag)

              // Delete any old resources
              shell("oc delete configmap ${backingServiceAppName}-config")
              shell("oc delete configmap ${backingServiceAppName}-configmap-envvar")
              shell("oc delete secret ${backingServiceAppName}-env")
              shell("oc delete secret ${backingServiceAppName}-certifikat")
              shell("oc delete secret ${backingServiceAppName}-secret-envvar")

              // Create new resources
              def wd = "cd ${tmpDir}/devops/openshift; "
              eshell(wd + "oc create configmap ${backingServiceAppName}-configmap-envvar --from-env-file=${STAGE}/configmap-envvar.properties")
              eshell(wd + "oc create configmap ${backingServiceAppName}-config --from-file=${STAGE}/config/")
              eshell(wd + "oc create secret generic ${backingServiceAppName}-secret-envvar --from-env-file=${STAGE}/secret-envvar.properties --type=Opaque")
              eshell(wd + "oc create secret generic ${backingServiceAppName}-env --from-file=${STAGE}/env/ --type=Opaque")
              eshell(wd + "oc create secret generic ${backingServiceAppName}-certifikat --from-file=${STAGE}/certifikat/ --type=Opaque")

              def imageStream = openshift.selector("is", "${backingServiceName}-verified").object().status.dockerImageRepository
              echo "Use ImageStream ${imageStream}:${backingServiceAppVersion}"

              def deployModel = openshift.process("-f", "${gitDevopsDir}/openshift/${DEPLOY_TEMPLATE}",
                      "-p", "APP_NAME=${backingServiceAppName}",
                      "-p", "IMAGE='${imageStream}:${backingServiceAppVersion}'",
                      "-p", "DATABASE_NAME=${backingServiceDbName}",
                      "-p", "HEALTH_URI=${healthUri}",
                      "-p", "STAGE=test")
              log "Wait for rollout (limited to 5 minutes)"
              timeout(5) {
                def rm = openshift.apply(deployModel).narrow("dc").rollout()
                echo "Waiting for deployment to complete"
                rm.status()
                log "Deployment done."
              }
            }
          }
        }
      }
    }

    stage('Deploy App') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def imageStream = openshift.selector("is", "${APP_NAME}").object().status.dockerImageRepository
              echo "Use ImageStream: ${imageStream}"
              def deployModel = openshift.process("-f", "${gitDevopsDir}/openshift/${DEPLOY_TEMPLATE}",
                      "-p", "APP_NAME=${appReleaseName}",
                      "-p", "IMAGE='$imageStream:${buildVersion}'",
                      "-p", "DATABASE_NAME=${dbName}",
                      "-p", "HEALTH_URI=${HEALTH_URI}",
                      "-p", "STAGE=${STAGE}")
              log "Wait for rollout (limited to 5 minutes)"
              timeout(10) {
                def rm = openshift.apply(deployModel).narrow("dc").rollout()
                log "Waiting for deployment to complete"
                rm.status()
                log "Deployment done."
              }

            }
          }
        }
      }
    }

    /* START TESTS */
    stage('Run Tests') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              testList.each { t ->
                stage(t.capitalize()) {
                  performTest(t, buildVersion, appReleaseName, gitDevopsDir)
                }
              }
            }
          }
        }
      }
    }
    /* END TESTS */

    stage('Store Verified Image') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              def source = "${APP_NAME}"
              def target = "${APP_NAME}-verified"
              echo "Promote image ${source} to imagestream ${target}"
              openshift.tag("${source}:${buildVersion}", "${target}:${buildVersion}", "${target}:${latestTag}")
            }
          }
        }
      }
    }

    stage('Tag Source') {
      steps {
        script {
          '${BUILD_TOOL}' "tagRelease ${versionFlags}"
        }
      }
    }
    stage('Propagate') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject() {
              propagateTo.each { t ->
                try {
                  build job: "dintyg-${t}-${RELEASE_VERSION}-pipeline", parameters: [string(name: 'GIT_BRANCH', value: GIT_BRANCH)]
                } catch (e) {
                  echo "Trigger build error (ignored): ${e.message}"
                }
              }
            }
          }
        }
      }
    }
  }

  post {
    success {
      script {
        util.notifySuccess()
      }
    }

    always {
      script {
        echo "cleanup"
        openshift.withCluster() {
          openshift.withProject() {
            dbScript("drop database ${dbName};")
            shell("rm -f ${applicationZip}")

            echo "Logs for ${appReleaseName}"
            openshift.selector("dc", "${appReleaseName}").logs()

            def image = openshift.selector("is", "${APP_NAME}").object()
            def imageStream = image.status.dockerImageRepository

            shell("oc process -f ${gitDevopsDir}/openshift/${DEPLOY_TEMPLATE} -p APP_NAME=\"${appReleaseName}\" -p IMAGE=\"${imageStream}:${buildVersion}\" -p STAGE=${STAGE} -p DATABASE_NAME=${dbName} | oc delete -f -")

            // Delete resources
            shell("oc delete configmap ${appReleaseName}-config")
            shell("oc delete configmap ${appReleaseName}-configmap-envvar")
            shell("oc delete secret ${appReleaseName}-env")
            shell("oc delete secret ${appReleaseName}-certifikat")
            shell("oc delete secret ${appReleaseName}-secret-envvar")

            if (!backingService.empty) {
              echo "Logs for ${backingServiceAppName}"
              openshift.selector("dc", "${backingServiceAppName}").logs()

              imageStream = openshift.selector("is", "${backingServiceName}-verified").object().status.dockerImageRepository

              shell("oc process -f ${gitDevopsDir}/openshift/${DEPLOY_TEMPLATE} -p APP_NAME=\"${backingServiceAppName}\" -p IMAGE=\"${imageStream}:${backingServiceAppVersion}\" -p STAGE=${STAGE} -p DATABASE_NAME=${backingServiceDbName} | oc delete -f -")
              dbScript("drop database ${backingServiceDbName};")

              // Delete backingService resources
              shell("oc delete configmap ${backingServiceAppName}-config")
              shell("oc delete secret ${backingServiceAppName}-env")
              shell("oc delete secret ${backingServiceAppName}-certifikat")
              shell("oc delete configmap ${backingServiceAppName}-configmap-envvar")
              shell("oc delete secret ${backingServiceAppName}-secret-envvar")
            }
          }
        }
      }
    }

    failure {
      script {
        echo "Pipeline Failed :("
        util.notifyFailed()
      }
    }

  }
}
