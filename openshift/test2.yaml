kind: Template
apiVersion: v1
metadata:
  name: buildtemplate-tartest
parameters:
  - name: GIT_URL
    required: true
    value: "https://github.com/sklintyg/devops.git"
  - name: GIT_CI_BRANCH
    required: true
    value: "release/2020-2"
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      name: tartest
      labels:
        app: tartest
    spec:
      runPolicy: SerialLatestOnly
      strategy:
        type: JenkinsPipeline
        jenkinsPipelineStrategy:
          jenkinsfile: |-
            def log(msg) {
              echo "${new Date()} -- ${msg}"
            }

            // Upload artifact
            def uploadArtifact(appName, buildVersion, sourcePath) {
              echo "Upload artifact for ${appName}:${buildVersion}"

              // Setup callback webhook
              def hook = registerWebhook()

              def imageStream = openshift.selector("is", "${appName}-artifact").object().status.dockerImageRepository
              echo "Use ImageStream: ${imageStream}"

              // to make the pod name somewhat unique
              // TODO: use generateName in Pod template, i.e. when it works
              def num = (new Random().nextInt() % 100000) + 1
              def suffix = (num < 0) ? "${num}" : "-${num}"

              echo "Suffix ${suffix}"

              def pod = openshift.process("-f", "openshift/artifactupload-pod.yaml",
              "-p", "APP_NAME=${appName}",
              "-p", "SOURCE_PATH=${sourcePath}",
              "-p", "IMAGE='${imageStream}:${buildVersion}'",
              "-p", "BUILD_VERSION=${buildVersion}",
              "-p", "CALLBACK_URL='${hook.getURL()}'",
              "-p", "BUILD_TAG=${appName}${suffix}")
              openshift.apply(pod)

              def data = ""
              timeout(45) {
                echo "Waiting (max 45 min) for POST to ${hook.getURL()}"
                data = waitForWebhook(hook).trim()
              }

              echo "Logs for ${appName}${suffix}"
              openshift.selector("pod", "${appName}${suffix}").logs()

              if ("SUCCESS".equals(data)) {
                echo "Upload SUCCESS"
              } else {
                error("${appName} FAILED artifact upload")
              }
            }

            pipeline {
              agent any

              environment {
                JAVA_TOOL_OPTIONS = '-Dfile.encoding=UTF-8'
              }

              stages {

                stage('Checkout') {
                  steps {
                    script {
                      git url: "${GIT_URL}", branch: "${GIT_CI_BRANCH}"

                    }
                  }
                }

                stage('Upload Artifact') {
                  steps {
                    script {
                      openshift.withCluster() {
                        openshift.withProject() {
                          uploadArtifact("privatlakarportal","1.14.0.13","se/inera/privatlakarportal/privatlakarportal-liquibase-runner/")
                          sh "ls -la ${pwd()}"
                        }
                      }
                    }
                  }
                }

              }
            }